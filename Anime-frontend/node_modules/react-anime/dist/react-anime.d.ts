import React from 'react';
export declare type Easing = 'easeInSine' | 'easeOutSine' | 'easeInOutSine' | 'easeInCirc' | 'easeOutCirc' | 'easeInOutCirc' | 'easeInElastic' | 'easeOutElastic' | 'easeInOutElastic' | 'easeInBack' | 'easeOutBack' | 'easeInOutBack' | 'easeInBounce' | 'easeOutBounce' | 'easeInOutBounce' | 'easeInQuad' | 'easeOutQuad' | 'easeInOutQuad' | 'easeInCubic' | 'easeOutCubic' | 'easeInOutCubic' | 'easeInQuart' | 'easeOutQuart' | 'easeInOutQuart' | 'easeInQuint' | 'easeOutQuint' | 'easeInOutQuint' | 'easeInExpo' | 'easeOutExpo' | 'easeInOutExpo' | 'linear' | [number, number, number, number];
export declare type AnimeValue = {
    value: string | number;
    delay: ((el: Element, index?: number, len?: number) => number) | number;
    duration?: ((el: Element, index?: number, len?: number) => number) | number;
    easing?: Easing;
} | string | number | ((el: Element, index?: number) => string | number);
export declare type AnimeProps = {
    children: React.ReactNode;
    delay?: ((el: Element, index?: number, len?: number) => number) | number;
    duration?: ((el: Element, index?: number, len?: number) => number) | number;
    autoplay?: boolean;
    loop?: number | boolean;
    direction?: 'normal' | 'reverse' | 'alternate';
    easing?: Easing;
    elasticity?: number;
    round?: number | boolean;
    svg?: boolean;
    begin?: Function;
    update?: Function;
    complete?: Function;
    value?: AnimeValue | AnimeValue[];
    translateX?: AnimeValue | AnimeValue[];
    translateY?: AnimeValue | AnimeValue[];
    rotate?: AnimeValue | AnimeValue[];
    scale?: AnimeValue | AnimeValue[];
    opacity?: AnimeValue | AnimeValue[];
    color?: AnimeValue | AnimeValue[];
    backgroundColor?: AnimeValue | AnimeValue[];
    points?: AnimeValue | AnimeValue[];
    strokeDashoffset?: AnimeValue | AnimeValue[];
    [prop: string]: any;
};
export default function Anime(props: AnimeProps): JSX.Element;
