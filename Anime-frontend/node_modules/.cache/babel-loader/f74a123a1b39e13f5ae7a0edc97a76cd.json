{"ast":null,"code":"var _jsxFileName = \"/home/tohzen/coding/Anime/Anime-frontend/src/components/Anime/Anime.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport AnimeList from \"./AnimeList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Anime extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: \"\",\n      type: \"\",\n      episodes: \"\",\n      image_url: \"\",\n      isLoading: true,\n      score: \"\",\n      synopsis: \"\",\n      title_japanese: \"\",\n      animeArray: [],\n      totalCount: 0,\n      totalPage: 0,\n      perPage: 10,\n      currentPage: 1,\n      maxPageLimit: 10,\n      minPageLimit: 0,\n      pageArray: []\n    };\n\n    this.getTotalPages = (totalResults, perPage) => {\n      let pages = [];\n\n      for (let i = 1; i < Math.ceil(totalResults / perPage); i++) {\n        pages.push(i);\n      }\n\n      return pages;\n    };\n\n    this.handleRandomTitle = () => {\n      let randomMovieArray = [\"Big trouble in little china\", \"the simpsons\", \"Rush hour\", \"the godfather\", \"Luca\", \"Pulp Fiction\", \"The Matrix\"];\n      let randomSelectedMovieIndex = Math.floor(Math.random() * randomMovieArray.length);\n      return randomMovieArray[randomSelectedMovieIndex];\n    };\n\n    this.handleSearchMovie = async movieTitle => {\n      try {\n        let randomMovieData = await axios.get(`https://omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API}&s=${movieTitle}&page=${this.state.currentPage}`);\n        return randomMovieData;\n      } catch (e) {\n        return e;\n      }\n    };\n\n    this.handleOnChange = event => {\n      this.setState({\n        movie: event.target.value\n      });\n    };\n\n    this.onSubmit = async event => {\n      try {\n        let result = await this.handleSearchMovie(this.state.movie);\n        window.sessionStorage.setItem(\"searchedMovieTitle\", this.state.movie);\n        let totalPageArray = this.getTotalPages(+result.data.totalResults, this.state.perPage);\n        this.setState({\n          movieArray: result.data.Search,\n          totalPage: +result.data.totalResults,\n          pageArray: totalPageArray\n        }); //catches error and logs it\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.showpagination = () => {\n      let totalPages = this.state.totalPage; // 440\n\n      let perPage = this.state.perPage; // 10\n\n      let currentPage = this.state.currentPage; // 1\n\n      let maxPageLimit = this.state.maxPageLimit; // 10\n\n      let minPageLimit = this.state.minPageLimit; // 0\n\n      const buildPagination = () => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: this.state.pageArray.map(number => {\n            console.log(number < maxPageLimit + 1 && number > minPageLimit); // console.log(\"number: \", number);\n            // console.log(\"maxPageLimit + 1\", maxPageLimit);\n\n            if (number < maxPageLimit + 1 && number > minPageLimit) {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: () => this.handleGoToPage(number),\n                style: {\n                  marginLeft: 15,\n                  marginRight: 15,\n                  cursor: \"pointer\",\n                  color: currentPage === number ? \"red\" : \"black\"\n                },\n                children: number\n              }, number, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 27\n              }, this);\n            }\n          })\n        }, void 0, false);\n      };\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: buildPagination()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 23\n      }, this);\n    };\n\n    this.handleGoToPage = number => {\n      this.setState({\n        currentPage: number\n      }, async () => {\n        let result = await this.handleSearchMovie(this.state.movie);\n        this.setState({\n          movieArray: result.data.Search\n        });\n      });\n    };\n\n    this.nextPage = () => {\n      this.setState(prevState => {\n        return { ...prevState,\n          currentPage: prevState.currentPage + 1\n        };\n      }, async () => {\n        let movie = \"\";\n        let searchedMovieTitleSessionStorage = window.sessionStorage.getItem(\"searchedMovieTitle\");\n        movie = searchedMovieTitleSessionStorage ? window.sessionStorage.getItem(\"searchedMovieTitle\") : this.state.movie;\n        let result = await this.handleSearchMovie(movie);\n        console.log(result);\n        this.setState({\n          movieArray: result.data.Search\n        });\n      });\n\n      if (this.state.currentPage + 1 > this.state.maxPageLimit) {\n        this.setState({\n          maxPageLimit: this.state.maxPageLimit + this.state.perPage,\n          minPageLimit: this.state.minPageLimit + this.state.perPage\n        });\n      }\n    };\n\n    this.prevPage = () => {\n      this.setState(prevState => {\n        return { ...prevState,\n          currentPage: prevState.currentPage - 1\n        };\n      }, async () => {\n        let result = await this.handleSearchMovie(\"batman\");\n        console.log(result);\n        this.setState({\n          movieArray: result.data.Search\n        });\n      });\n\n      if ((this.state.currentPage - 1) % this.state.perPage === 0) {\n        this.setState({\n          maxPageLimit: this.state.maxPageLimit - this.state.perPage,\n          minPageLimit: this.state.minPageLimit - this.state.perPage\n        });\n      }\n    };\n\n    this.handleSearchAnime = async title => {\n      try {\n        //https://api.spoonacular.com/recipes/random?number=1&tags=vegetarian,dessert\n        let results = await axios.get(`https://api.jikan.moe/v3/search/anime?q=${title}`); // console.log(result)\n\n        this.setState({\n          animeArray: results.data.results\n        }); // console.log(this.state.animeArray)\n      } catch (e) {\n        return e;\n      }\n    };\n\n    this.handleOnChange = event => {\n      this.setState({\n        title: event.target.value\n      });\n    };\n\n    this.onSubmit = async event => {\n      try {\n        let results = await this.handleSearchAnime(this.state.title);\n        console.log(results);\n        this.setState({\n          animeArray: results.data.results\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      //check for session storage\n      let searchedMovieTitleSessionStorage = window.sessionStorage.getItem(\"searchedMovieTitle\");\n\n      if (searchedMovieTitleSessionStorage) {\n        let result = await this.handleSearchMovie(searchedMovieTitleSessionStorage);\n        let totalPageArray = this.getTotalPages(+result.data.totalResults, this.state.perPage);\n        this.setState({\n          movie: searchedMovieTitleSessionStorage,\n          movieArray: result.data.Search,\n          totalPage: +result.data.totalResults,\n          //in batman result is 440\n          pageArray: totalPageArray\n        });\n      } else {\n        let randomMovieTitle = this.handleRandomTitle();\n        let result = await this.handleSearchMovie(randomMovieTitle); // let result = await this.handleSearchMovie(randomMovieTitle);\n\n        let totalPageArray = this.getTotalPages(+result.data.totalResults, this.state.perPage); //logs results object where you can find total results\n\n        console.log(result);\n        console.log(totalPageArray);\n        this.setState({\n          movie: randomMovieTitle,\n          movieArray: result.data.Search,\n          totalPage: +result.data.totalResults,\n          //in batman result is 440\n          pageArray: totalPageArray //[1,2,3,4,5] all the way time 440 each page will contain 10 results\n\n        }); // let randomMovieTitle = this.handleRandomTitle();\n        // let result = this.handleSearchMovie(randomMovieTitle);\n        // let result2 = this.handleSearchMovie(\"batman\");\n        // let result3 = this.handleSearchMovie(\"the matrix\");\n        // let getAllPromiseMovies = Promise.all([result, result2, result3]);\n        // let resolvedMovie = await getAllPromiseMovies;\n        // console.log(resolvedMovie);\n        // this.setState({\n        //   movieArray: resolvedMovie[0].data.Search,\n        //   movieArray2: resolvedMovie[1].data.Search,\n        //   movieArray3: resolvedMovie[2].data.Search,\n        // });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 500,\n          margin: \"0 auto\",\n          textAlign: \"center\",\n          marginTop: \"50px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search something...\",\n          name: \"title\",\n          onChange: this.handleOnChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onSubmit,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 1500,\n          margin: \"0 auto\",\n          textAlign: \"center\",\n          marginTop: \"50px\",\n          display: \"flex\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Animes \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(AnimeList, {\n          animeArray: this.state.animeArray\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 33\n    }, this);\n  }\n\n}\nexport default Anime;","map":{"version":3,"sources":["/home/tohzen/coding/Anime/Anime-frontend/src/components/Anime/Anime.js"],"names":["React","Component","axios","AnimeList","Anime","state","title","type","episodes","image_url","isLoading","score","synopsis","title_japanese","animeArray","totalCount","totalPage","perPage","currentPage","maxPageLimit","minPageLimit","pageArray","getTotalPages","totalResults","pages","i","Math","ceil","push","handleRandomTitle","randomMovieArray","randomSelectedMovieIndex","floor","random","length","handleSearchMovie","movieTitle","randomMovieData","get","process","env","REACT_APP_MOVIE_API","e","handleOnChange","event","setState","movie","target","value","onSubmit","result","window","sessionStorage","setItem","totalPageArray","data","movieArray","Search","console","log","showpagination","totalPages","buildPagination","map","number","handleGoToPage","marginLeft","marginRight","cursor","color","nextPage","prevState","searchedMovieTitleSessionStorage","getItem","prevPage","handleSearchAnime","results","componentDidMount","randomMovieTitle","render","width","margin","textAlign","marginTop","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from \"axios\";\nimport AnimeList from \"./AnimeList\";\nexport class Anime extends Component {\n  state = {\n    title: \"\",\n    type: \"\",\n    episodes: \"\",\n    image_url: \"\",\n    isLoading: true,\n    score: \"\",\n    synopsis: \"\",\n    title_japanese: \"\",\n    animeArray: [],\n    totalCount: 0,\n    totalPage: 0,\n    perPage: 10,\n    currentPage: 1,\n    maxPageLimit: 10,\n    minPageLimit: 0,\n    pageArray: [],\n  }\n  \n  getTotalPages = (totalResults, perPage) => {\n    let pages = [];\n    \n    for (let i = 1; i < Math.ceil(totalResults / perPage); i++) {\n      pages.push(i);\n    }\n    return pages;\n  };\n  \n  async componentDidMount() {\n    try {\n      //check for session storage\n      let searchedMovieTitleSessionStorage =\n      window.sessionStorage.getItem(\"searchedMovieTitle\");\n      \n      if (searchedMovieTitleSessionStorage) {\n        let result = await this.handleSearchMovie(\n          searchedMovieTitleSessionStorage\n          );\n          \n          let totalPageArray = this.getTotalPages(\n            +result.data.totalResults,\n            this.state.perPage\n            );\n            \n            this.setState({\n              movie: searchedMovieTitleSessionStorage,\n              movieArray: result.data.Search,\n              totalPage: +result.data.totalResults, //in batman result is 440\n              pageArray: totalPageArray,\n            });\n          } else {\n            let randomMovieTitle = this.handleRandomTitle();\n            let result = await this.handleSearchMovie(randomMovieTitle);\n            // let result = await this.handleSearchMovie(randomMovieTitle);\n            \n            let totalPageArray = this.getTotalPages(\n              +result.data.totalResults,\n              this.state.perPage\n              );\n              \n              //logs results object where you can find total results\n              console.log(result);\n              \n              console.log(totalPageArray);\n              \n              this.setState({\n                movie: randomMovieTitle,\n                movieArray: result.data.Search,\n                totalPage: +result.data.totalResults, //in batman result is 440\n                pageArray: totalPageArray, //[1,2,3,4,5] all the way time 440 each page will contain 10 results\n              });\n              \n              // let randomMovieTitle = this.handleRandomTitle();\n              // let result = this.handleSearchMovie(randomMovieTitle);\n              // let result2 = this.handleSearchMovie(\"batman\");\n              // let result3 = this.handleSearchMovie(\"the matrix\");\n              // let getAllPromiseMovies = Promise.all([result, result2, result3]);\n              // let resolvedMovie = await getAllPromiseMovies;\n              // console.log(resolvedMovie);\n              // this.setState({\n              //   movieArray: resolvedMovie[0].data.Search,\n              //   movieArray2: resolvedMovie[1].data.Search,\n              //   movieArray3: resolvedMovie[2].data.Search,\n              // });\n            }\n          } catch (e) {\n            console.log(e);\n          }\n        }\n        \n        handleRandomTitle = () => {\n          let randomMovieArray = [\n            \"Big trouble in little china\",\n            \"the simpsons\",\n            \"Rush hour\",\n            \"the godfather\",\n            \"Luca\",\n            \"Pulp Fiction\",\n            \"The Matrix\",\n          ];\n          \n          let randomSelectedMovieIndex = Math.floor(\n            Math.random() * randomMovieArray.length\n            );\n            \n            return randomMovieArray[randomSelectedMovieIndex];\n          };\n          \n          handleSearchMovie = async (movieTitle) => {\n            try {\n              let randomMovieData = await axios.get(\n                `https://omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API}&s=${movieTitle}&page=${this.state.currentPage}`\n                );\n                \n                return randomMovieData;\n              } catch (e) {\n                return e;\n              }\n            };\n            \n            //creates handler function that sets following state\n            handleOnChange = (event) => {\n              this.setState({\n                movie: event.target.value,\n              });\n            };\n            \n            //function that sets variable to ajax call and sets state movieArray to result.data.Search\n            onSubmit = async (event) => {\n              try {\n                let result = await this.handleSearchMovie(this.state.movie);\n                \n                window.sessionStorage.setItem(\"searchedMovieTitle\", this.state.movie);\n                \n                let totalPageArray = this.getTotalPages(\n                  +result.data.totalResults,\n                  this.state.perPage\n                  );\n                  \n                  this.setState({\n                    movieArray: result.data.Search,\n                    totalPage: +result.data.totalResults,\n                    pageArray: totalPageArray,\n                  });\n                  //catches error and logs it\n                } catch (e) {\n                  console.log(e);\n                }\n              };\n              \n              showpagination = () => {\n                let totalPages = this.state.totalPage; // 440\n                let perPage = this.state.perPage; // 10\n                let currentPage = this.state.currentPage; // 1\n                let maxPageLimit = this.state.maxPageLimit; // 10\n                let minPageLimit = this.state.minPageLimit; // 0\n                \n                const buildPagination = () => {\n                  return (\n                    <>\n                    {this.state.pageArray.map((number) => {\n                      console.log(number < maxPageLimit + 1 && number > minPageLimit);\n                      // console.log(\"number: \", number);\n                      // console.log(\"maxPageLimit + 1\", maxPageLimit);\n                      \n                      if (number < maxPageLimit + 1 && number > minPageLimit) {\n                        return (\n                          <span\n                          onClick={() => this.handleGoToPage(number)}\n                          style={{\n                            marginLeft: 15,\n                            marginRight: 15,\n                            cursor: \"pointer\",\n                            color: currentPage === number ? \"red\" : \"black\",\n                          }}\n                          key={number}\n                          >\n                          {number}\n                          </span>\n                          );\n                        }\n                      })}\n                      </>\n                      );\n                    };\n                    \n                    return (\n                      <div>\n                      <ul>{buildPagination()}</ul>\n                      </div>\n                      );\n                    };\n                    \n                    handleGoToPage = (number) => {\n                      this.setState(\n                        {\n                          currentPage: number,\n                        },\n                        async () => {\n                          let result = await this.handleSearchMovie(this.state.movie);\n                          \n                          this.setState({\n                            movieArray: result.data.Search,\n                          });\n                        }\n                        );\n                      };\n                      \n                      nextPage = () => {\n                        this.setState(\n                          (prevState) => {\n                            return {\n                              ...prevState,\n                              currentPage: prevState.currentPage + 1,\n                            };\n                          },\n                          async () => {\n                            let movie = \"\";\n                            \n                            let searchedMovieTitleSessionStorage =\n                            window.sessionStorage.getItem(\"searchedMovieTitle\");\n                            \n                            movie = searchedMovieTitleSessionStorage\n                            ? window.sessionStorage.getItem(\"searchedMovieTitle\")\n                            : this.state.movie;\n                            \n                            let result = await this.handleSearchMovie(movie);\n                            console.log(result);\n                            this.setState({\n                              movieArray: result.data.Search,\n                            });\n                          }\n                          );\n                          \n                          if (this.state.currentPage + 1 > this.state.maxPageLimit) {\n                            this.setState({\n                              maxPageLimit: this.state.maxPageLimit + this.state.perPage,\n                              minPageLimit: this.state.minPageLimit + this.state.perPage,\n                            });\n                          }\n                        };\n                        \n                        prevPage = () => {\n                          this.setState(\n                            (prevState) => {\n                              return {\n                                ...prevState,\n                                currentPage: prevState.currentPage - 1,\n                              };\n                            },\n                            async () => {\n                              let result = await this.handleSearchMovie(\"batman\");\n                              console.log(result);\n                              this.setState({\n                                movieArray: result.data.Search,\n                              });\n                            }\n                            );\n                            \n                            if ((this.state.currentPage - 1) % this.state.perPage === 0) {\n                              this.setState({\n                                maxPageLimit: this.state.maxPageLimit - this.state.perPage,\n                                minPageLimit: this.state.minPageLimit - this.state.perPage,\n                              });\n                            }\n                          };\n                          \n                          handleSearchAnime = async (title) => {\n                            try {\n                              //https://api.spoonacular.com/recipes/random?number=1&tags=vegetarian,dessert\n                              let results = await axios.get(\n                                `https://api.jikan.moe/v3/search/anime?q=${title}`\n                                );\n                                // console.log(result)\n                                this.setState({\n                                  animeArray: results.data.results\n                                });\n                                // console.log(this.state.animeArray)\n                              } catch (e) {\n                                return e;\n                              }\n                            };\n                            handleOnChange = (event) => {\n                              this.setState({\n                                title: event.target.value,\n                              });\n                            };\n                            onSubmit = async (event) => {\n                              try {\n                                let results = await this.handleSearchAnime(this.state.title);\n                                console.log(results)\n                                this.setState({\n                                  animeArray: results.data.results,\n                                })\n                              } catch (e) {\n                                console.log(e);\n                              }\n                            }\n                            \n                            render() {\n                              console.log(this.state)\n                              return (\n                                <div>\n                                <div\n                                style={{\n                                  width: 500,\n                                  margin: \"0 auto\",\n                                  textAlign: \"center\",\n                                  marginTop: \"50px\",\n                                }}\n                                >\n                                <input\n                                type=\"text\"\n                                placeholder=\"Search something...\"\n                                name=\"title\"\n                                onChange={this.handleOnChange}\n                                />\n                                <button onClick={this.onSubmit}>Search</button>\n                                </div>\n                                <div style={{\n                                  width: 1500,\n                                  margin: \"0 auto\",\n                                  textAlign: \"center\",\n                                  marginTop: \"50px\",\n                                  display: \"flex\",\n                                }}\n                                >\n                                <h2>Animes </h2>\n                                <AnimeList animeArray={this.state.animeArray} />\n                                </div>\n                                </div>\n                                );\n                              }\n                            }\n                            export default Anime"]},"metadata":{},"sourceType":"module"}