{"ast":null,"code":"// import React, { Component } from \"react\";\n// import jwtDecode from \"jwt-decode\";\n// import { isAlpha, isEmail, isAlphanumeric, isStrongPassword } from \"validator\";\n// import { toast } from \"react-toastify\";\n// import Axios from \"../utils/Axios\";\n// import checkIfUserIsAuth from \"../utils/checkIfUserIsAuth\";\n// import \"./Signup.css\";\n// export class Signup extends Component {\n//   state = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     username: \"\",\n//     email: \"\",\n//     password: \"\",\n//     confirmPassword: \"\",\n//     firstNameError: \"\",\n//     lastNameError: \"\",\n//     usernameError: \"\",\n//     emailError: \"\",\n//     passwordError: \"\",\n//     confirmPasswordError: \"\",\n//     isButtonDisabled: true,\n//     firstNameOnFocus: false,\n//     lastNameOnFocus: false,\n//     emailOnFocus: false,\n//     usernameOnFocus: false,\n//     passwordOnFocus: false,\n//     confirmPasswordOnFocus: false,\n//   };\n//   componentDidMount() {\n//     let isAuth = checkIfUserIsAuth();\n//     if (isAuth) {\n//       this.props.history.push(\"/movie\");\n//     }\n//   }\n//   handleOnChange = (event) => {\n//     this.setState(\n//       {\n//         [event.target.name]: event.target.value,\n//       },\n//       () => {\n//         if (\n//           event.target.name === \"firstName\" ||\n//           event.target.name === \"lastName\"\n//         ) {\n//           this.handleFirstNameAndLastNameInput(event);\n//         }\n//         if (event.target.name === \"email\") {\n//           this.handleEmailInput();\n//         }\n//         if (event.target.name === \"username\") {\n//           this.handleUsernameInput();\n//         }\n//         if (event.target.name === \"password\") {\n//           this.handlePasswordInput();\n//         }\n//         if (event.target.name === \"confirmPassword\") {\n//           this.handleConfirmPasswordInput();\n//         }\n//       }\n//     );\n//   };\n//   handleConfirmPasswordInput = () => {\n//     if (this.state.password !== this.state.confirmPassword) {\n//       this.setState({\n//         confirmPasswordError: \"Password does not match!\",\n//         isButtonDisabled: true,\n//       });\n//     } else {\n//       this.setState({\n//         confirmPasswordError: \"\",\n//       });\n//     }\n//   };\n//   handlePasswordInput = () => {\n//     if (this.state.confirmPasswordOnFocus) {\n//       if (this.state.password !== this.state.confirmPassword) {\n//         this.setState({\n//           confirmPasswordError: \"Password does not match\",\n//           isButtonDisabled: true,\n//         });\n//       } else {\n//         this.setState({\n//           confirmPasswordError: \"\",\n//         });\n//       }\n//     }\n//     if (this.state.password.length === 0) {\n//       this.setState({\n//         passwordError: \"Password cannot be empty\",\n//         isButtonDisabled: true,\n//       });\n//     } else {\n//       if (isStrongPassword(this.state.password)) {\n//         this.setState({\n//           passwordError: \"\",\n//         });\n//       } else {\n//         this.setState({\n//           passwordError:\n//             \"Password must contains 1 uppercase, 1 lowercase, 1 special character, 1 number and minimul of 8 charactors long\",\n//           isButtonDisabled: true,\n//         });\n//       }\n//     }\n//   };\n//   handleEmailInput = () => {\n//     if (this.state.email.length === 0) {\n//       this.setState({\n//         emailError: \"Email cannot be empty\",\n//         isButtonDisabled: true,\n//       });\n//     } else {\n//       if (isEmail(this.state.email)) {\n//         this.setState({\n//           emailError: \"\",\n//         });\n//       } else {\n//         this.setState({\n//           emailError: \"Please, enter a valid email!\",\n//           isButtonDisabled: true,\n//         });\n//       }\n//     }\n//   };\n//   handleFirstNameAndLastNameInput = (event) => {\n//     if (this.state[event.target.name].length > 0) {\n//       if (isAlpha(this.state[event.target.name])) {\n//         this.setState({\n//           [`${event.target.name}Error`]: \"\",\n//         });\n//       } else {\n//         this.setState({\n//           [`${event.target.name}Error`]: `${event.target.placeholder} can only have alphabet`,\n//           isButtonDisabled: true,\n//         });\n//       }\n//     } else {\n//       this.setState({\n//         [`${event.target.name}Error`]: `${event.target.placeholder} cannot be empty`,\n//         isButtonDisabled: true,\n//       });\n//     }\n//   };\n//   handleUsernameInput = () => {\n//     if (this.state.username.length === 0) {\n//       this.setState({\n//         usernameError: \"Username cannot be empty\",\n//         isButtonDisabled: true,\n//       });\n//     } else {\n//       if (isAlphanumeric(this.state.username)) {\n//         this.setState({\n//           usernameError: \"\",\n//         });\n//       } else {\n//         this.setState({\n//           usernameError: \"Username can only have alphabet and number\",\n//           isButtonDisabled: true,\n//         });\n//       }\n//     }\n//   };\n//   handleOnSubmit = async (event) => {\n//     event.preventDefault();\n//     try {\n//       let userInputObj = {\n//         firstName: this.state.firstName,\n//         lastName: this.state.lastName,\n//         email: this.state.email,\n//         username: this.state.username,\n//         password: this.state.password,\n//       };\n//       let success = await Axios.post(\"/api/user/sign-up\", userInputObj);\n//       console.log(success);\n//       toast.success(`${success.data.message}`,{\n//         position: \"top-center\",\n//         autoClose: 5000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//         progress: undefined,\n//       });\n//     } catch (e) {\n//       toast.error(`${e.response.data.message}`,{\n//         position: \"top-center\",\n//         autoClose: 5000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//         progress: undefined,\n//       });\n//     }\n//   };\n//   handleOnBlur = (event) => {\n//     // console.log(event.target.name);\n//     // console.log(\"handle onBlur Triggered\");\n//     if (this.state[event.target.name].length === 0) {\n//       this.setState({\n//         [`${event.target.name}Error`]: `${event.target.placeholder} cannot be empty`,\n//       });\n//     }\n//   };\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log(prevState.isButtonDisabled);\n//     if (prevState.isButtonDisabled === true) {\n//       if (\n//         this.state.firstNameOnFocus &&\n//         this.state.lastNameOnFocus &&\n//         this.state.emailOnFocus &&\n//         this.state.usernameOnFocus &&\n//         this.state.passwordOnFocus &&\n//         this.state.confirmPasswordOnFocus\n//       ) {\n//         if (\n//           this.state.firstNameError.length === 0 &&\n//           this.state.lastNameError.length === 0 &&\n//           this.state.usernameError.length === 0 &&\n//           this.state.emailError.length === 0 &&\n//           this.state.passwordError.length === 0 &&\n//           this.state.confirmPasswordError.length === 0 &&\n//           this.state.password === this.state.confirmPassword\n//         ) {\n//           this.setState({\n//             isButtonDisabled: false,\n//           });\n//         }\n//       }\n//     }\n//   }\n//   handleInputOnFocus = (event) => {\n//     if (!this.state[`${event.target.name}OnFocus`]) {\n//       this.setState({\n//         [`${event.target.name}OnFocus`]: true,\n//       });\n//     }\n//   };\n//   render() {\n//     const {\n//       firstName,\n//       lastName,\n//       username,\n//       email,\n//       password,\n//       confirmPassword,\n//       firstNameError,\n//       lastNameError,\n//       usernameError,\n//       emailError,\n//       passwordError,\n//       confirmPasswordError,\n//     } = this.state;\n//     console.log(this.props);\n//     return (\n//       <div className=\"container\">\n//         <div className=\"form-text\">Sign up</div>\n//         <div className=\"form-div\">\n//           <form className=\"form\" onSubmit={this.handleOnSubmit}>\n//             <div className=\"form-group-inline\">\n//               <div className=\"inline-container\">\n//                 <label htmlFor=\"firstName\">First Name</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"firstName\"\n//                   value={firstName}\n//                   placeholder=\"First Name\"\n//                   name=\"firstName\"\n//                   onChange={this.handleOnChange}\n//                   autoFocus\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {firstNameError && firstNameError}\n//                 </div>\n//               </div>\n//               <div className=\"inline-container\">\n//                 <label htmlFor=\"lastName\">Last Name</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"lastName\"\n//                   value={lastName}\n//                   placeholder=\"Last Name\"\n//                   name=\"lastName\"\n//                   onChange={this.handleOnChange}\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {lastNameError && lastNameError}\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"form-group-block\">\n//               <div className=\"block-container\">\n//                 <label htmlFor=\"email\">Email</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"email\"\n//                   value={email}\n//                   placeholder=\"Email\"\n//                   onChange={this.handleOnChange}\n//                   name=\"email\"\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">{emailError && emailError}</div>\n//               </div>\n//             </div>\n//             <div className=\"form-group-block\">\n//               <div className=\"block-container\">\n//                 <label htmlFor=\"username\">Username</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"username\"\n//                   value={username}\n//                   placeholder=\"Username\"\n//                   onChange={this.handleOnChange}\n//                   name=\"username\"\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {usernameError && usernameError}\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"form-group-block\">\n//               <div className=\"block-container\">\n//                 <label htmlFor=\"password\">Password</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"password\"\n//                   value={password}\n//                   placeholder=\"Password\"\n//                   onChange={this.handleOnChange}\n//                   name=\"password\"\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {passwordError && passwordError}\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"form-group-block\">\n//               <div className=\"block-container\">\n//                 <label htmlFor=\"confirmPassword\">Confirm Password</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"confirmPassword\"\n//                   value={confirmPassword}\n//                   placeholder=\"Confirm Password\"\n//                   onChange={this.handleOnChange}\n//                   name=\"confirmPassword\"\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {confirmPasswordError && confirmPasswordError}\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"button-container\">\n//               <button type=\"submit\" disabled={this.state.isButtonDisabled}>\n//                 Submit\n//               </button>\n//             </div>\n//           </form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// export default Signup;","map":{"version":3,"sources":["C:/Users/tohze/coding/Anime/Anime-frontend/src/components/Signup/Signup.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from \"react\";\n// import jwtDecode from \"jwt-decode\";\n// import { isAlpha, isEmail, isAlphanumeric, isStrongPassword } from \"validator\";\n// import { toast } from \"react-toastify\";\n// import Axios from \"../utils/Axios\";\n// import checkIfUserIsAuth from \"../utils/checkIfUserIsAuth\";\n// import \"./Signup.css\";\n\n// export class Signup extends Component {\n//   state = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     username: \"\",\n//     email: \"\",\n//     password: \"\",\n//     confirmPassword: \"\",\n//     firstNameError: \"\",\n//     lastNameError: \"\",\n//     usernameError: \"\",\n//     emailError: \"\",\n//     passwordError: \"\",\n//     confirmPasswordError: \"\",\n//     isButtonDisabled: true,\n//     firstNameOnFocus: false,\n//     lastNameOnFocus: false,\n//     emailOnFocus: false,\n//     usernameOnFocus: false,\n//     passwordOnFocus: false,\n//     confirmPasswordOnFocus: false,\n//   };\n\n//   componentDidMount() {\n//     let isAuth = checkIfUserIsAuth();\n\n//     if (isAuth) {\n//       this.props.history.push(\"/movie\");\n//     }\n//   }\n\n//   handleOnChange = (event) => {\n//     this.setState(\n//       {\n//         [event.target.name]: event.target.value,\n//       },\n//       () => {\n//         if (\n//           event.target.name === \"firstName\" ||\n//           event.target.name === \"lastName\"\n//         ) {\n//           this.handleFirstNameAndLastNameInput(event);\n//         }\n\n//         if (event.target.name === \"email\") {\n//           this.handleEmailInput();\n//         }\n\n//         if (event.target.name === \"username\") {\n//           this.handleUsernameInput();\n//         }\n//         if (event.target.name === \"password\") {\n//           this.handlePasswordInput();\n//         }\n\n//         if (event.target.name === \"confirmPassword\") {\n//           this.handleConfirmPasswordInput();\n//         }\n//       }\n//     );\n//   };\n\n//   handleConfirmPasswordInput = () => {\n//     if (this.state.password !== this.state.confirmPassword) {\n//       this.setState({\n//         confirmPasswordError: \"Password does not match!\",\n//         isButtonDisabled: true,\n//       });\n//     } else {\n//       this.setState({\n//         confirmPasswordError: \"\",\n//       });\n//     }\n//   };\n\n//   handlePasswordInput = () => {\n//     if (this.state.confirmPasswordOnFocus) {\n//       if (this.state.password !== this.state.confirmPassword) {\n//         this.setState({\n//           confirmPasswordError: \"Password does not match\",\n//           isButtonDisabled: true,\n//         });\n//       } else {\n//         this.setState({\n//           confirmPasswordError: \"\",\n//         });\n//       }\n//     }\n\n//     if (this.state.password.length === 0) {\n//       this.setState({\n//         passwordError: \"Password cannot be empty\",\n//         isButtonDisabled: true,\n//       });\n//     } else {\n//       if (isStrongPassword(this.state.password)) {\n//         this.setState({\n//           passwordError: \"\",\n//         });\n//       } else {\n//         this.setState({\n//           passwordError:\n//             \"Password must contains 1 uppercase, 1 lowercase, 1 special character, 1 number and minimul of 8 charactors long\",\n//           isButtonDisabled: true,\n//         });\n//       }\n//     }\n//   };\n\n//   handleEmailInput = () => {\n//     if (this.state.email.length === 0) {\n//       this.setState({\n//         emailError: \"Email cannot be empty\",\n//         isButtonDisabled: true,\n//       });\n//     } else {\n//       if (isEmail(this.state.email)) {\n//         this.setState({\n//           emailError: \"\",\n//         });\n//       } else {\n//         this.setState({\n//           emailError: \"Please, enter a valid email!\",\n//           isButtonDisabled: true,\n//         });\n//       }\n//     }\n//   };\n\n//   handleFirstNameAndLastNameInput = (event) => {\n//     if (this.state[event.target.name].length > 0) {\n//       if (isAlpha(this.state[event.target.name])) {\n//         this.setState({\n//           [`${event.target.name}Error`]: \"\",\n//         });\n//       } else {\n//         this.setState({\n//           [`${event.target.name}Error`]: `${event.target.placeholder} can only have alphabet`,\n//           isButtonDisabled: true,\n//         });\n//       }\n//     } else {\n//       this.setState({\n//         [`${event.target.name}Error`]: `${event.target.placeholder} cannot be empty`,\n//         isButtonDisabled: true,\n//       });\n//     }\n//   };\n\n//   handleUsernameInput = () => {\n//     if (this.state.username.length === 0) {\n//       this.setState({\n//         usernameError: \"Username cannot be empty\",\n//         isButtonDisabled: true,\n//       });\n//     } else {\n//       if (isAlphanumeric(this.state.username)) {\n//         this.setState({\n//           usernameError: \"\",\n//         });\n//       } else {\n//         this.setState({\n//           usernameError: \"Username can only have alphabet and number\",\n//           isButtonDisabled: true,\n//         });\n//       }\n//     }\n//   };\n\n//   handleOnSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       let userInputObj = {\n//         firstName: this.state.firstName,\n//         lastName: this.state.lastName,\n//         email: this.state.email,\n//         username: this.state.username,\n//         password: this.state.password,\n//       };\n//       let success = await Axios.post(\"/api/user/sign-up\", userInputObj);\n//       console.log(success);\n//       toast.success(`${success.data.message}`,{\n//         position: \"top-center\",\n//         autoClose: 5000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//         progress: undefined,\n//       });\n//     } catch (e) {\n//       toast.error(`${e.response.data.message}`,{\n//         position: \"top-center\",\n//         autoClose: 5000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//         progress: undefined,\n//       });\n//     }\n//   };\n\n//   handleOnBlur = (event) => {\n//     // console.log(event.target.name);\n//     // console.log(\"handle onBlur Triggered\");\n\n//     if (this.state[event.target.name].length === 0) {\n//       this.setState({\n//         [`${event.target.name}Error`]: `${event.target.placeholder} cannot be empty`,\n//       });\n//     }\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log(prevState.isButtonDisabled);\n\n//     if (prevState.isButtonDisabled === true) {\n//       if (\n//         this.state.firstNameOnFocus &&\n//         this.state.lastNameOnFocus &&\n//         this.state.emailOnFocus &&\n//         this.state.usernameOnFocus &&\n//         this.state.passwordOnFocus &&\n//         this.state.confirmPasswordOnFocus\n//       ) {\n//         if (\n//           this.state.firstNameError.length === 0 &&\n//           this.state.lastNameError.length === 0 &&\n//           this.state.usernameError.length === 0 &&\n//           this.state.emailError.length === 0 &&\n//           this.state.passwordError.length === 0 &&\n//           this.state.confirmPasswordError.length === 0 &&\n//           this.state.password === this.state.confirmPassword\n//         ) {\n//           this.setState({\n//             isButtonDisabled: false,\n//           });\n//         }\n//       }\n//     }\n//   }\n\n//   handleInputOnFocus = (event) => {\n//     if (!this.state[`${event.target.name}OnFocus`]) {\n//       this.setState({\n//         [`${event.target.name}OnFocus`]: true,\n//       });\n//     }\n//   };\n\n//   render() {\n//     const {\n//       firstName,\n//       lastName,\n//       username,\n//       email,\n//       password,\n//       confirmPassword,\n//       firstNameError,\n//       lastNameError,\n//       usernameError,\n//       emailError,\n//       passwordError,\n//       confirmPasswordError,\n//     } = this.state;\n\n//     console.log(this.props);\n\n//     return (\n//       <div className=\"container\">\n//         <div className=\"form-text\">Sign up</div>\n\n//         <div className=\"form-div\">\n//           <form className=\"form\" onSubmit={this.handleOnSubmit}>\n//             <div className=\"form-group-inline\">\n//               <div className=\"inline-container\">\n//                 <label htmlFor=\"firstName\">First Name</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"firstName\"\n//                   value={firstName}\n//                   placeholder=\"First Name\"\n//                   name=\"firstName\"\n//                   onChange={this.handleOnChange}\n//                   autoFocus\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {firstNameError && firstNameError}\n//                 </div>\n//               </div>\n\n//               <div className=\"inline-container\">\n//                 <label htmlFor=\"lastName\">Last Name</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"lastName\"\n//                   value={lastName}\n//                   placeholder=\"Last Name\"\n//                   name=\"lastName\"\n//                   onChange={this.handleOnChange}\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {lastNameError && lastNameError}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"form-group-block\">\n//               <div className=\"block-container\">\n//                 <label htmlFor=\"email\">Email</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"email\"\n//                   value={email}\n//                   placeholder=\"Email\"\n//                   onChange={this.handleOnChange}\n//                   name=\"email\"\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">{emailError && emailError}</div>\n//               </div>\n//             </div>\n\n//             <div className=\"form-group-block\">\n//               <div className=\"block-container\">\n//                 <label htmlFor=\"username\">Username</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"username\"\n//                   value={username}\n//                   placeholder=\"Username\"\n//                   onChange={this.handleOnChange}\n//                   name=\"username\"\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {usernameError && usernameError}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"form-group-block\">\n//               <div className=\"block-container\">\n//                 <label htmlFor=\"password\">Password</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"password\"\n//                   value={password}\n//                   placeholder=\"Password\"\n//                   onChange={this.handleOnChange}\n//                   name=\"password\"\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {passwordError && passwordError}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"form-group-block\">\n//               <div className=\"block-container\">\n//                 <label htmlFor=\"confirmPassword\">Confirm Password</label>\n//                 <input\n//                   type=\"text\"\n//                   id=\"confirmPassword\"\n//                   value={confirmPassword}\n//                   placeholder=\"Confirm Password\"\n//                   onChange={this.handleOnChange}\n//                   name=\"confirmPassword\"\n//                   onBlur={this.handleOnBlur}\n//                   onFocus={this.handleInputOnFocus}\n//                 />\n//                 <div className=\"errorMessage\">\n//                   {confirmPasswordError && confirmPasswordError}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"button-container\">\n//               <button type=\"submit\" disabled={this.state.isButtonDisabled}>\n//                 Submit\n//               </button>\n//             </div>\n//           </form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Signup;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}