{"ast":null,"code":"var _jsxFileName = \"/home/tohzen/coding/Anime/Anime-frontend/src/components/Anime/Anime.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport AnimeList from \"./AnimeList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Anime extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: \"\",\n      type: \"\",\n      episodes: \"\",\n      image_url: \"\",\n      isLoading: true,\n      score: \"\",\n      synopsis: \"\",\n      title_japanese: \"\",\n      animeArray: [],\n      totalCount: 0,\n      totalPage: 0,\n      perPage: 10,\n      currentPage: 1,\n      maxPageLimit: 10,\n      minPageLimit: 0,\n      pageArray: []\n    };\n\n    this.getTotalPages = (totalResults, perPage) => {\n      let pages = [];\n\n      for (let i = 1; i < Math.ceil(totalResults / perPage); i++) {\n        pages.push(i);\n      }\n\n      return pages;\n    };\n\n    this.handleRandomTitle = () => {\n      let randomAnimeArray = [\"Big trouble in little china\", \"the simpsons\", \"Rush hour\", \"the godfather\", \"Luca\", \"Pulp Fiction\", \"The Matrix\"];\n      let randomSelectedAnimeIndex = Math.floor(Math.random() * randomAnimeArray.length);\n      return randomAnimeArray[randomSelectedAnimeIndex];\n    };\n\n    this.handleSearchAnime = async movieTitle => {\n      try {\n        let randomAnimeData = await axios.get(`https://omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API}&s=${movieTitle}&page=${this.state.currentPage}`);\n        return randomAnimeData;\n      } catch (e) {\n        return e;\n      }\n    };\n\n    this.handleOnChange = event => {\n      this.setState({\n        anime: event.target.value\n      });\n    };\n\n    this.onSubmit = async event => {\n      try {\n        let result = await this.handleSearchAnime(this.state.anime);\n        window.sessionStorage.setItem(\"searchedAnimeTitle\", this.state.movie);\n        let totalPageArray = this.getTotalPages(+result.data.totalResults, this.state.perPage);\n        this.setState({\n          movieArray: result.data.Search,\n          totalPage: +result.data.totalResults,\n          pageArray: totalPageArray\n        }); //catches error and logs it\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.showpagination = () => {\n      let totalPages = this.state.totalPage; // 440\n\n      let perPage = this.state.perPage; // 10\n\n      let currentPage = this.state.currentPage; // 1\n\n      let maxPageLimit = this.state.maxPageLimit; // 10\n\n      let minPageLimit = this.state.minPageLimit; // 0\n\n      const buildPagination = () => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: this.state.pageArray.map(number => {\n            console.log(number < maxPageLimit + 1 && number > minPageLimit); // console.log(\"number: \", number);\n            // console.log(\"maxPageLimit + 1\", maxPageLimit);\n\n            if (number < maxPageLimit + 1 && number > minPageLimit) {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: () => this.handleGoToPage(number),\n                style: {\n                  marginLeft: 15,\n                  marginRight: 15,\n                  cursor: \"pointer\",\n                  color: currentPage === number ? \"red\" : \"black\"\n                },\n                children: number\n              }, number, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 19\n              }, this);\n            }\n          })\n        }, void 0, false);\n      };\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: buildPagination()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.handleGoToPage = number => {\n      this.setState({\n        currentPage: number\n      }, async () => {\n        let result = await this.handleSearchAnime(this.state.movie);\n        this.setState({\n          movieArray: result.data.Search\n        });\n      });\n    };\n\n    this.nextPage = () => {\n      this.setState(prevState => {\n        return { ...prevState,\n          currentPage: prevState.currentPage + 1\n        };\n      }, async () => {\n        let movie = \"\";\n        let searchedAnimeTitleSessionStorage = window.sessionStorage.getItem(\"searchedAnimeTitle\");\n        movie = searchedAnimeTitleSessionStorage ? window.sessionStorage.getItem(\"searchedAnimeTitle\") : this.state.movie;\n        let result = await this.handleSearchAnime(movie);\n        console.log(result);\n        this.setState({\n          movieArray: result.data.Search\n        });\n      });\n\n      if (this.state.currentPage + 1 > this.state.maxPageLimit) {\n        this.setState({\n          maxPageLimit: this.state.maxPageLimit + this.state.perPage,\n          minPageLimit: this.state.minPageLimit + this.state.perPage\n        });\n      }\n    };\n\n    this.prevPage = () => {\n      this.setState(prevState => {\n        return { ...prevState,\n          currentPage: prevState.currentPage - 1\n        };\n      }, async () => {\n        let result = await this.handleSearchAnime(\"batman\");\n        console.log(result);\n        this.setState({\n          movieArray: result.data.Search\n        });\n      });\n\n      if ((this.state.currentPage - 1) % this.state.perPage === 0) {\n        this.setState({\n          maxPageLimit: this.state.maxPageLimit - this.state.perPage,\n          minPageLimit: this.state.minPageLimit - this.state.perPage\n        });\n      }\n    };\n\n    this.handleSearchAnime = async title => {\n      try {\n        //https://api.spoonacular.com/recipes/random?number=1&tags=vegetarian,dessert\n        let results = await axios.get(`https://api.jikan.moe/v3/search/anime?q=${title}`); // console.log(result)\n\n        this.setState({\n          animeArray: results.data.results\n        }); // console.log(this.state.animeArray)\n      } catch (e) {\n        return e;\n      }\n    };\n\n    this.handleOnChange = event => {\n      this.setState({\n        title: event.target.value\n      });\n    };\n\n    this.onSubmit = async event => {\n      try {\n        let results = await this.handleSearchAnime(this.state.title);\n        console.log(results);\n        this.setState({\n          animeArray: results.data.results\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      //check for session storage\n      let searchedAnimeTitleSessionStorage = window.sessionStorage.getItem(\"searchedAnimeTitle\");\n\n      if (searchedAnimeTitleSessionStorage) {\n        let result = await this.handleSearchAnime(searchedAnimeTitleSessionStorage);\n        let totalPageArray = this.getTotalPages(+result.data.totalResults, this.state.perPage);\n        this.setState({\n          anime: searchedAnimeTitleSessionStorage,\n          movieArray: result.data.Search,\n          totalPage: +result.data.totalResults,\n          //in batman result is 440\n          pageArray: totalPageArray\n        });\n      } else {\n        let randomAnimeTitle = this.handleRandomTitle();\n        let result = await this.handleSearchAnime(randomAnimeTitle); // let result = await this.handleSearchAnime(randomAnimeTitle);\n\n        let totalPageArray = this.getTotalPages(+result.data.totalResults, this.state.perPage); //logs results object where you can find total results\n\n        console.log(result);\n        console.log(totalPageArray);\n        this.setState({\n          anime: randomAnimeTitle,\n          movieArray: result.data.Search,\n          totalPage: +result.data.totalResults,\n          //in batman result is 440\n          pageArray: totalPageArray //[1,2,3,4,5] all the way time 440 each page will contain 10 results\n\n        }); // let randomAnimeTitle = this.handleRandomTitle();\n        // let result = this.handleSearchAnime(randomAnimeTitle);\n        // let result2 = this.handleSearchAnime(\"batman\");\n        // let result3 = this.handleSearchAnime(\"the matrix\");\n        // let getAllPromiseAnimes = Promise.all([result, result2, result3]);\n        // let resolvedAnime = await getAllPromiseAnimes;\n        // console.log(resolvedAnime);\n        // this.setState({\n        //   movieArray: resolvedAnime[0].data.Search,\n        //   movieArray2: resolvedAnime[1].data.Search,\n        //   movieArray3: resolvedAnime[2].data.Search,\n        // });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 500,\n          margin: \"0 auto\",\n          textAlign: \"center\",\n          marginTop: \"50px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search something...\",\n          name: \"title\",\n          onChange: this.handleOnChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onSubmit,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 1500,\n          margin: \"0 auto\",\n          textAlign: \"center\",\n          marginTop: \"50px\",\n          display: \"flex\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Animes \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(AnimeList, {\n          animeArray: this.state.animeArray\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }, this);\n  }\n\n}\nexport default Anime;","map":{"version":3,"sources":["/home/tohzen/coding/Anime/Anime-frontend/src/components/Anime/Anime.js"],"names":["React","Component","axios","AnimeList","Anime","state","title","type","episodes","image_url","isLoading","score","synopsis","title_japanese","animeArray","totalCount","totalPage","perPage","currentPage","maxPageLimit","minPageLimit","pageArray","getTotalPages","totalResults","pages","i","Math","ceil","push","handleRandomTitle","randomAnimeArray","randomSelectedAnimeIndex","floor","random","length","handleSearchAnime","movieTitle","randomAnimeData","get","process","env","REACT_APP_MOVIE_API","e","handleOnChange","event","setState","anime","target","value","onSubmit","result","window","sessionStorage","setItem","movie","totalPageArray","data","movieArray","Search","console","log","showpagination","totalPages","buildPagination","map","number","handleGoToPage","marginLeft","marginRight","cursor","color","nextPage","prevState","searchedAnimeTitleSessionStorage","getItem","prevPage","results","componentDidMount","randomAnimeTitle","render","width","margin","textAlign","marginTop","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from \"axios\";\nimport AnimeList from \"./AnimeList\";\nexport class Anime extends Component {\n    state = {\n      title: \"\",\n      type: \"\",\n      episodes: \"\",\n      image_url: \"\",\n      isLoading: true,\n      score: \"\",\n      synopsis: \"\",\n      title_japanese: \"\",\n      animeArray: [],\n      totalCount: 0,\n    totalPage: 0,\n    perPage: 10,\n    currentPage: 1,\n    maxPageLimit: 10,\n    minPageLimit: 0,\n    pageArray: [],\n    }\n\n    getTotalPages = (totalResults, perPage) => {\n      let pages = [];\n  \n      for (let i = 1; i < Math.ceil(totalResults / perPage); i++) {\n        pages.push(i);\n      }\n      return pages;\n    };\n  \n    async componentDidMount() {\n      try {\n        //check for session storage\n        let searchedAnimeTitleSessionStorage =\n          window.sessionStorage.getItem(\"searchedAnimeTitle\");\n  \n        if (searchedAnimeTitleSessionStorage) {\n          let result = await this.handleSearchAnime(\n            searchedAnimeTitleSessionStorage\n          );\n  \n          let totalPageArray = this.getTotalPages(\n            +result.data.totalResults,\n            this.state.perPage\n          );\n  \n          this.setState({\n            anime: searchedAnimeTitleSessionStorage,\n            movieArray: result.data.Search,\n            totalPage: +result.data.totalResults, //in batman result is 440\n            pageArray: totalPageArray,\n          });\n        } else {\n          let randomAnimeTitle = this.handleRandomTitle();\n          let result = await this.handleSearchAnime(randomAnimeTitle);\n          // let result = await this.handleSearchAnime(randomAnimeTitle);\n  \n          let totalPageArray = this.getTotalPages(\n            +result.data.totalResults,\n            this.state.perPage\n          );\n  \n          //logs results object where you can find total results\n          console.log(result);\n  \n          console.log(totalPageArray);\n  \n          this.setState({\n            anime: randomAnimeTitle,\n            movieArray: result.data.Search,\n            totalPage: +result.data.totalResults, //in batman result is 440\n            pageArray: totalPageArray, //[1,2,3,4,5] all the way time 440 each page will contain 10 results\n          });\n  \n          // let randomAnimeTitle = this.handleRandomTitle();\n          // let result = this.handleSearchAnime(randomAnimeTitle);\n          // let result2 = this.handleSearchAnime(\"batman\");\n          // let result3 = this.handleSearchAnime(\"the matrix\");\n          // let getAllPromiseAnimes = Promise.all([result, result2, result3]);\n          // let resolvedAnime = await getAllPromiseAnimes;\n          // console.log(resolvedAnime);\n          // this.setState({\n          //   movieArray: resolvedAnime[0].data.Search,\n          //   movieArray2: resolvedAnime[1].data.Search,\n          //   movieArray3: resolvedAnime[2].data.Search,\n          // });\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  \n    handleRandomTitle = () => {\n      let randomAnimeArray = [\n        \"Big trouble in little china\",\n        \"the simpsons\",\n        \"Rush hour\",\n        \"the godfather\",\n        \"Luca\",\n        \"Pulp Fiction\",\n        \"The Matrix\",\n      ];\n  \n      let randomSelectedAnimeIndex = Math.floor(\n        Math.random() * randomAnimeArray.length\n      );\n  \n      return randomAnimeArray[randomSelectedAnimeIndex];\n    };\n  \n    handleSearchAnime = async (movieTitle) => {\n      try {\n        let randomAnimeData = await axios.get(\n          `https://omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API}&s=${movieTitle}&page=${this.state.currentPage}`\n        );\n  \n        return randomAnimeData;\n      } catch (e) {\n        return e;\n      }\n    };\n  \n    //creates handler function that sets following state\n    handleOnChange = (event) => {\n      this.setState({\n        anime: event.target.value,\n      });\n    };\n  \n    //function that sets variable to ajax call and sets state movieArray to result.data.Search\n    onSubmit = async (event) => {\n      try {\n        let result = await this.handleSearchAnime(this.state.anime);\n  \n        window.sessionStorage.setItem(\"searchedAnimeTitle\", this.state.movie);\n  \n        let totalPageArray = this.getTotalPages(\n          +result.data.totalResults,\n          this.state.perPage\n        );\n  \n        this.setState({\n          movieArray: result.data.Search,\n          totalPage: +result.data.totalResults,\n          pageArray: totalPageArray,\n        });\n        //catches error and logs it\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  \n    showpagination = () => {\n      let totalPages = this.state.totalPage; // 440\n      let perPage = this.state.perPage; // 10\n      let currentPage = this.state.currentPage; // 1\n      let maxPageLimit = this.state.maxPageLimit; // 10\n      let minPageLimit = this.state.minPageLimit; // 0\n  \n      const buildPagination = () => {\n        return (\n          <>\n            {this.state.pageArray.map((number) => {\n              console.log(number < maxPageLimit + 1 && number > minPageLimit);\n              // console.log(\"number: \", number);\n              // console.log(\"maxPageLimit + 1\", maxPageLimit);\n  \n              if (number < maxPageLimit + 1 && number > minPageLimit) {\n                return (\n                  <span\n                    onClick={() => this.handleGoToPage(number)}\n                    style={{\n                      marginLeft: 15,\n                      marginRight: 15,\n                      cursor: \"pointer\",\n                      color: currentPage === number ? \"red\" : \"black\",\n                    }}\n                    key={number}\n                  >\n                    {number}\n                  </span>\n                );\n              }\n            })}\n          </>\n        );\n      };\n  \n      return (\n        <div>\n          <ul>{buildPagination()}</ul>\n        </div>\n      );\n    };\n  \n    handleGoToPage = (number) => {\n      this.setState(\n        {\n          currentPage: number,\n        },\n        async () => {\n          let result = await this.handleSearchAnime(this.state.movie);\n  \n          this.setState({\n            movieArray: result.data.Search,\n          });\n        }\n      );\n    };\n  \n    nextPage = () => {\n      this.setState(\n        (prevState) => {\n          return {\n            ...prevState,\n            currentPage: prevState.currentPage + 1,\n          };\n        },\n        async () => {\n          let movie = \"\";\n  \n          let searchedAnimeTitleSessionStorage =\n            window.sessionStorage.getItem(\"searchedAnimeTitle\");\n  \n          movie = searchedAnimeTitleSessionStorage\n            ? window.sessionStorage.getItem(\"searchedAnimeTitle\")\n            : this.state.movie;\n  \n          let result = await this.handleSearchAnime(movie);\n          console.log(result);\n          this.setState({\n            movieArray: result.data.Search,\n          });\n        }\n      );\n  \n      if (this.state.currentPage + 1 > this.state.maxPageLimit) {\n        this.setState({\n          maxPageLimit: this.state.maxPageLimit + this.state.perPage,\n          minPageLimit: this.state.minPageLimit + this.state.perPage,\n        });\n      }\n    };\n  \n    prevPage = () => {\n      this.setState(\n        (prevState) => {\n          return {\n            ...prevState,\n            currentPage: prevState.currentPage - 1,\n          };\n        },\n        async () => {\n          let result = await this.handleSearchAnime(\"batman\");\n          console.log(result);\n          this.setState({\n            movieArray: result.data.Search,\n          });\n        }\n      );\n\n      if ((this.state.currentPage - 1) % this.state.perPage === 0) {\n        this.setState({\n          maxPageLimit: this.state.maxPageLimit - this.state.perPage,\n          minPageLimit: this.state.minPageLimit - this.state.perPage,\n        });\n      }\n    };\n    \n    handleSearchAnime = async (title) => {\n        try {\n          //https://api.spoonacular.com/recipes/random?number=1&tags=vegetarian,dessert\n          let results = await axios.get(\n            `https://api.jikan.moe/v3/search/anime?q=${title}`\n          );\n            // console.log(result)\n          this.setState({\n            animeArray: results.data.results\n          });\n          // console.log(this.state.animeArray)\n        } catch (e) {\n          return e;\n        }\n      };\n      handleOnChange = (event) => {\n        this.setState({\n          title: event.target.value,\n        });\n      };\n      onSubmit = async (event) => {\n          try {\n              let results = await this.handleSearchAnime(this.state.title);\n              console.log(results)\n              this.setState({\n                  animeArray: results.data.results,\n              })\n          } catch (e) {\n              console.log(e);\n          }\n      }\n      \n    render() {\n      console.log(this.state)\n        return (\n          <div>\n            <div\n                style={{\n                width: 500,\n                margin: \"0 auto\",\n                textAlign: \"center\",\n                marginTop: \"50px\",\n                }}\n            >\n                <input\n                type=\"text\"\n                placeholder=\"Search something...\"\n                name=\"title\"\n                onChange={this.handleOnChange}\n                />\n                <button onClick={this.onSubmit}>Search</button>\n            </div>\n            <div style={{\n            width: 1500,\n            margin: \"0 auto\",\n            textAlign: \"center\",\n            marginTop: \"50px\",\n            display: \"flex\",\n            }}\n            >\n              <h2>Animes </h2>\n              <AnimeList animeArray={this.state.animeArray} />\n            </div>\n            </div>\n        );\n    }\n}\nexport default Anime"]},"metadata":{},"sourceType":"module"}