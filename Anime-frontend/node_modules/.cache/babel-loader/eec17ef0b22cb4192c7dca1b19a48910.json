{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nimport setAxiosAuthToken from \"./setAxiosAuthToken\";\n\nconst checkIfUserIsAuth = () => {\n  //check if token exists, if it doesnt exists return false\n  //if it does exists, check if token valid (meaning not expired)\n  //if expired return false\n  //else return true\n  let getJwtToken = window.localStorage.getItem(\"jwtToken\");\n\n  if (getJwtToken) {\n    const currentTime = Date.now() / 1000;\n    let decodedToken = jwtDecode(getJwtToken);\n\n    if (decodedToken.exp < currentTime) {\n      setAxiosAuthToken(null);\n      return false;\n    } else {\n      setAxiosAuthToken(getJwtToken);\n      return true;\n    }\n  } else {\n    return false;\n  }\n};\n\nexport default checkIfUserIsAuth;","map":{"version":3,"sources":["C:/Users/tohze/coding/Anime/Anime-frontend/src/components/utils/checkIfUserIsAuth.js"],"names":["jwtDecode","setAxiosAuthToken","checkIfUserIsAuth","getJwtToken","window","localStorage","getItem","currentTime","Date","now","decodedToken","exp"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B;AACA;AACA;AACA;AAEA,MAAIC,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAlB;;AAEA,MAAIH,WAAJ,EAAiB;AACf,UAAMI,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC;AACA,QAAIC,YAAY,GAAGV,SAAS,CAACG,WAAD,CAA5B;;AAEA,QAAIO,YAAY,CAACC,GAAb,GAAmBJ,WAAvB,EAAoC;AAClCN,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA,aAAO,KAAP;AACD,KAHD,MAGO;AACLA,MAAAA,iBAAiB,CAACE,WAAD,CAAjB;AACA,aAAO,IAAP;AACD;AACF,GAXD,MAWO;AACL,WAAO,KAAP;AACD;AACF,CAtBD;;AAwBA,eAAeD,iBAAf","sourcesContent":["import jwtDecode from \"jwt-decode\";\nimport setAxiosAuthToken from \"./setAxiosAuthToken\";\n\nconst checkIfUserIsAuth = () => {\n  //check if token exists, if it doesnt exists return false\n  //if it does exists, check if token valid (meaning not expired)\n  //if expired return false\n  //else return true\n\n  let getJwtToken = window.localStorage.getItem(\"jwtToken\");\n\n  if (getJwtToken) {\n    const currentTime = Date.now() / 1000;\n    let decodedToken = jwtDecode(getJwtToken);\n\n    if (decodedToken.exp < currentTime) {\n      setAxiosAuthToken(null);\n      return false;\n    } else {\n      setAxiosAuthToken(getJwtToken);\n      return true;\n    }\n  } else {\n    return false;\n  }\n};\n\nexport default checkIfUserIsAuth;\n"]},"metadata":{},"sourceType":"module"}